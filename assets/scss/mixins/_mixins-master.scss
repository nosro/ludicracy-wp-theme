// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

@mixin flex-grid {
  display: flex;
}

// using a mixin since we can't use placeholder selectors
@mixin grid-col {
  flex: 1;
  padding-right: $gutter;
}

$breakpoints: (
  l : 1200px,
  m : 768px,
  s : 360px,
);

// Style based on a generated breakpoint or a custom breakpoint value
//
// Custom values must be em, rem, or px, and px will be converted to em.
// Note: use both $from-breakpoint and $to-breakpoint to do a min/max range
//
// $from-breakpoint: use only this to specify a minimum width
// $to-breakpoint: use only this to specify a maximum width
@mixin breakpoint( $from-breakpoint, $to-breakpoint: false ) {
  $breakpoint-string: null;
  $start: null;
  $end: null;

  // set $start value for min-width
  @if ( $from-breakpoint != false ) {
    // check if the breakpoint is from config or not
    @if map-has-key($breakpoints, $from-breakpoint) {
      $start: map-get($breakpoints, $from-breakpoint );
      // if not, check if rem or em and set breakpoint to that value
    } @else {
      @error "The value you entered for breakpoint should be from $breakpoints map, or a px, em, or rem value. You entered #{$from-breakpoint}.";
    }
  }

  // set $end value for max-width
  @if ( $to-breakpoint != false ) {
    // check if the breakpoint is from config or not
    @if map-has-key($breakpoints, $to-breakpoint) {
      $end: map-get($breakpoints, $to-breakpoint) - 1;
    } @else {
      // else throw an error
      @error "The value you entered for breakpoint should be from $breakpoints map, or a px, em, or rem value. You entered #{$from-breakpoint}.";
    }
  }

  // create media query string
  @if (false == $to-breakpoint and false != $from-breakpoint) {
    $breakpoint-string: '(min-width: ' + $start ')';
  } @else if (false == $from-breakpoint and false != $to-breakpoint) {
    $breakpoint-string: '(max-width: ' + $end ')';
  } @else {
    $breakpoint-string: '(min-width: ' + $start + ') and (max-width: ' + $end ')';
  }

  // output media query
  @if (null != $breakpoint-string) {
    @media #{$breakpoint-string} {
      @content;
    }
  } @else {
    @error "breakpoint mixin failed to compile.";
  }
}